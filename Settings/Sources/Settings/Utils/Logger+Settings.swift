//
//  Logger+Settings.swift
//  TouchBistro
//
//  Generated by make package
//

import Foundation
import Platform

enum ErrorKind: String {
    case exampleError
}

enum Topic: String {
    case exampleTopic
}

/**
   Public interface used to log stuff
 */
enum Logger {
    private static var instance: Platform.Logger?
    static var logger: Platform.Logger? {
        if instance == nil {
            assertionFailure("Logger must be set")
        }
        return instance
    }

    static func setLogger(_ logger: Platform.Logger) {
        instance = logger
    }

    static func debug(_ message: String, topic: Topic? = nil, extra: [String: Encodable] = [:], file: String = #file, function: String = #function) {
        logger?._debug(message, topic: topic, extra: extra, file: file, function: function)
    }

    static func info(_ message: String, topic: Topic, extra: [String: Encodable], file: String = #file, function: String = #function) {
        logger?._info(message, topic: topic, extra: extra, file: file, function: function)
    }

    static func warn(_ message: String, topic: Topic, errorKind: ErrorKind, error: String?, extra: [String: Encodable], file: String = #file, function: String = #function) {
        logger?._warn(message, topic: topic, errorKind: errorKind, error: error, extra: extra, file: file, function: function)
    }

    static func error(_ message: String, topic: Topic, errorKind: ErrorKind, error: String?, extra: [String: Encodable], file: String = #file, function: String = #function) {
        logger?._error(message, topic: topic, errorKind: errorKind, error: error, extra: extra, file: file, function: function)
    }
}
